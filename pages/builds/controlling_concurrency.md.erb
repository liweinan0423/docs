# Controlling Concurrency

Some tasks need to be run with very strict concurrency rules to ensure they don’t collide with each other. Common examples for needing concurrency control are deployments, app releases and infrastructure tasks.

To help you control concurrency Buildkite provides two primitives: concurrency groups, and concurrency limits.

<%= toc %>

## Concurrency Groups

Concurrency groups are labels that can be used to group together Buildkite jobs when applying concurrency limits. When you create a group in an individual `pipeline.yml` file, that concurrency group will then be available organsiation wide and can be used in by other pipelines. To avoid overriding an existing group, the names of these groups should be unique.   

Common examples for concurrency group values include:

* `our-payment-gateway/deployment`
* `terraform/update-state`
* `my-mobile-app/app-store-release`

Note: you can’t set a custom concurrency group label using the web interface, only a `pipeline.yml`. If you set concurrency in the web interface a label is automatically generated for that step.

## Concurrency Limits

Concurrency limits define the number of build jobs that are allowed to be running at any one time.

For example, a concurrency limit of `1` ensures that no two jobs with the same concurrency group will run at the same time.

## Example: Deploy Step

The following is an example [command step](/docs/agent/cli-pipeline#command-steps) that ensures deployments run one at a time:

```yaml
- command: 'deploy.sh'
  label: '\:rocket\: Deploy production'
  branches: 'master'
  agents:
    deploy: true
  concurrency: 1
  concurrency_group: 'our-payment-gateway/deploy'
```

If multiple builds are created with this step, each deployment job will be queued up and run one at a time in the order they were created.
